{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { ApiFetchProductById } from \"../api/storeApi\";\nexport const fetchProductById = createAsyncThunk(\"product/fetchProductById\", async id => {\n  const res = await ApiFetchProductById(id);\n  return res;\n});\nexport const pIdSlice = createSlice({\n  name: \"pid\",\n  initialState: {\n    value: {},\n    status: \"\"\n  },\n\n  extraReducers(builder) {\n    builder.addCase(fetchProductById.pending, state => {\n      return { ...state,\n        status: \"loading\"\n      };\n    });\n    builder.addCase(fetchProductById.fulfilled, (state, action) => {\n      return {\n        status: \"success\",\n        value: action.payload.data.product\n      };\n    });\n    builder.addCase(fetchProductById.rejected, () => {\n      return {\n        status: \"error\",\n        value: {}\n      };\n    });\n  }\n\n});\nexport const pIdReducer = pIdSlice.reducer;","map":{"version":3,"sources":["/home/duke/Code/scandiweb/src/provider/pIdSlice.js"],"names":["createSlice","createAsyncThunk","ApiFetchProductById","fetchProductById","id","res","pIdSlice","name","initialState","value","status","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","data","product","rejected","pIdReducer","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,SAASC,mBAAT,QAAoC,iBAApC;AAEA,OAAO,MAAMC,gBAAgB,GAAGF,gBAAgB,CAC9C,0BAD8C,EAE9C,MAAOG,EAAP,IAAc;AACZ,QAAMC,GAAG,GAAG,MAAMH,mBAAmB,CAACE,EAAD,CAArC;AACA,SAAOC,GAAP;AACD,CAL6C,CAAzC;AAQP,OAAO,MAAMC,QAAQ,GAAGN,WAAW,CAAC;AAClCO,EAAAA,IAAI,EAAE,KAD4B;AAElCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,MAAM,EAAE;AAFI,GAFoB;;AAMlCC,EAAAA,aAAa,CAACC,OAAD,EAAU;AACrBA,IAAAA,OAAO,CAACC,OAAR,CAAgBV,gBAAgB,CAACW,OAAjC,EAA2CC,KAAD,IAAW;AACnD,aAAO,EACL,GAAGA,KADE;AAELL,QAAAA,MAAM,EAAE;AAFH,OAAP;AAID,KALD;AAMAE,IAAAA,OAAO,CAACC,OAAR,CAAgBV,gBAAgB,CAACa,SAAjC,EAA4C,CAACD,KAAD,EAAQE,MAAR,KAAmB;AAC7D,aAAO;AACLP,QAAAA,MAAM,EAAE,SADH;AAELD,QAAAA,KAAK,EAAEQ,MAAM,CAACC,OAAP,CAAeC,IAAf,CAAoBC;AAFtB,OAAP;AAID,KALD;AAMAR,IAAAA,OAAO,CAACC,OAAR,CAAgBV,gBAAgB,CAACkB,QAAjC,EAA2C,MAAM;AAC/C,aAAO;AACLX,QAAAA,MAAM,EAAE,OADH;AAELD,QAAAA,KAAK,EAAE;AAFF,OAAP;AAID,KALD;AAMD;;AAzBiC,CAAD,CAA5B;AA4BP,OAAO,MAAMa,UAAU,GAAGhB,QAAQ,CAACiB,OAA5B","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { ApiFetchProductById } from \"../api/storeApi\";\n\nexport const fetchProductById = createAsyncThunk(\n  \"product/fetchProductById\",\n  async (id) => {\n    const res = await ApiFetchProductById(id);\n    return res;\n  }\n);\n\nexport const pIdSlice = createSlice({\n  name: \"pid\",\n  initialState: {\n    value: {},\n    status: \"\",\n  },\n  extraReducers(builder) {\n    builder.addCase(fetchProductById.pending, (state) => {\n      return {\n        ...state,\n        status: \"loading\",\n      };\n    });\n    builder.addCase(fetchProductById.fulfilled, (state, action) => {\n      return {\n        status: \"success\",\n        value: action.payload.data.product,\n      };\n    });\n    builder.addCase(fetchProductById.rejected, () => {\n      return {\n        status: \"error\",\n        value: {},\n      };\n    });\n  },\n});\n\nexport const pIdReducer = pIdSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}