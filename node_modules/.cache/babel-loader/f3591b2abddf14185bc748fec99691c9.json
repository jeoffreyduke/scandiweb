{"ast":null,"code":"import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport { globalReducer } from \"./globalSlice\";\nimport pdpSlice from \"./pdpSlice\";\nimport appSlice from \"./appSlice\";\nimport csSlice from \"./csSlice\";\nimport { pIdReducer } from \"./pIdSlice\";\nimport cartSlice from \"./cartSlice\";\nimport counterSlice from \"./counterSlice\";\nimport { persistStore, persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport autoMergeLevel2 from \"redux-persist/es/stateReconciler/autoMergeLevel2\";\nconst rootReducer = combineReducers({\n  globalReducer,\n  appSlice,\n  csSlice,\n  pdpSlice,\n  pIdReducer,\n  cartSlice,\n  counterSlice\n});\nconst persistedReducer = persistReducer({\n  key: \"root\",\n  storage,\n  version: 0,\n  stateReconciler: autoMergeLevel2\n}, rootReducer);\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n  })\n});\nexport const persistor = persistStore(store);\nexport default store;","map":{"version":3,"sources":["/home/duke/Code/scandiweb/src/provider/store.js"],"names":["configureStore","combineReducers","globalReducer","pdpSlice","appSlice","csSlice","pIdReducer","cartSlice","counterSlice","persistStore","persistReducer","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","storage","autoMergeLevel2","rootReducer","persistedReducer","key","version","stateReconciler","store","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","persistor"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,eAAzB,QAAgD,kBAAhD;AACA,SAASC,aAAT,QAA8B,eAA9B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,SACEC,YADF,EAEEC,cAFF,EAGEC,KAHF,EAIEC,SAJF,EAKEC,KALF,EAMEC,OANF,EAOEC,KAPF,EAQEC,QARF,QASO,eATP;AAUA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,eAAP,MAA4B,kDAA5B;AAEA,MAAMC,WAAW,GAAGlB,eAAe,CAAC;AAClCC,EAAAA,aADkC;AAElCE,EAAAA,QAFkC;AAGlCC,EAAAA,OAHkC;AAIlCF,EAAAA,QAJkC;AAKlCG,EAAAA,UALkC;AAMlCC,EAAAA,SANkC;AAOlCC,EAAAA;AAPkC,CAAD,CAAnC;AAUA,MAAMY,gBAAgB,GAAGV,cAAc,CACrC;AACEW,EAAAA,GAAG,EAAE,MADP;AAEEJ,EAAAA,OAFF;AAGEK,EAAAA,OAAO,EAAE,CAHX;AAIEC,EAAAA,eAAe,EAAEL;AAJnB,CADqC,EAOrCC,WAPqC,CAAvC;AAUA,MAAMK,KAAK,GAAGxB,cAAc,CAAC;AAC3ByB,EAAAA,OAAO,EAAEL,gBADkB;AAE3BM,EAAAA,UAAU,EAAGC,oBAAD,IACVA,oBAAoB,CAAC;AACnBC,IAAAA,iBAAiB,EAAE;AACjBC,MAAAA,cAAc,EAAE,CAAClB,KAAD,EAAQC,SAAR,EAAmBC,KAAnB,EAA0BC,OAA1B,EAAmCC,KAAnC,EAA0CC,QAA1C;AADC;AADA,GAAD;AAHK,CAAD,CAA5B;AAUA,OAAO,MAAMc,SAAS,GAAGrB,YAAY,CAACe,KAAD,CAA9B;AAEP,eAAeA,KAAf","sourcesContent":["import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport { globalReducer } from \"./globalSlice\";\nimport pdpSlice from \"./pdpSlice\";\nimport appSlice from \"./appSlice\";\nimport csSlice from \"./csSlice\";\nimport { pIdReducer } from \"./pIdSlice\";\nimport cartSlice from \"./cartSlice\";\nimport counterSlice from \"./counterSlice\";\n\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport autoMergeLevel2 from \"redux-persist/es/stateReconciler/autoMergeLevel2\";\n\nconst rootReducer = combineReducers({\n  globalReducer,\n  appSlice,\n  csSlice,\n  pdpSlice,\n  pIdReducer,\n  cartSlice,\n  counterSlice,\n});\n\nconst persistedReducer = persistReducer(\n  {\n    key: \"root\",\n    storage,\n    version: 0,\n    stateReconciler: autoMergeLevel2,\n  },\n  rootReducer\n);\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n});\n\nexport const persistor = persistStore(store);\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}