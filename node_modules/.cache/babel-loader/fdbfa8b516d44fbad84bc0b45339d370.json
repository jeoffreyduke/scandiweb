{"ast":null,"code":"import { createSlice, current } from \"@reduxjs/toolkit\";\n\nconst IdBuilder = () => {\n  let finalId = \"\";\n  return {\n    addId(id) {\n      finalId += id;\n      return this;\n    },\n\n    build() {\n      return finalId;\n    },\n\n    clear() {\n      finalId = \"\";\n    }\n\n  };\n};\n\n_c = IdBuilder;\nexport const cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    totalItemQuantity: 0,\n    products: []\n  },\n  reducers: {\n    addIntoCart: (state, action) => {\n      const id = IdBuilder().addId(action.payload.product.data.id);\n      action.payload.product.attributeData.forEach(item => {\n        id.addId(`-${item.name.replace(/ /g, \"-\")}-${item.selectedIndex}`);\n      });\n      const products = state.products.map(item => {\n        if (item.id === id.build()) {\n          return { ...item,\n            quantity: item.quantity + 1\n          };\n        }\n\n        return item;\n      });\n\n      if (state.products.find(item => item.id === id.build())) {\n        return { ...state,\n          products: [...products],\n          totalItemQuantity: state.totalItemQuantity + 1\n        };\n      }\n\n      return { ...state,\n        products: [...state.products, {\n          id: id.build(),\n          product: action.payload.product,\n          quantity: 1\n        }],\n        totalItemQuantity: state.totalItemQuantity + 1\n      };\n    },\n    removeFromCart: (state, action) => {\n      if (state.products.find(item => item.id === action.payload.id)) {\n        if (state.products.find(item => item.quantity === 1 && item.id === action.payload.id)) {\n          return { ...state,\n            products: state.products.filter(product => {\n              return product.id !== action.payload.id;\n            }),\n            totalItemQuantity: state.totalItemQuantity - 1\n          };\n        }\n\n        const products = state.products.map(item => {\n          if (item.id === action.payload.id) {\n            return { ...item,\n              quantity: item.quantity - 1\n            };\n          }\n\n          return item;\n        });\n        return { ...state,\n          products: [...products],\n          totalItemQuantity: state.totalItemQuantity - 1\n        };\n      }\n\n      return { ...state\n      };\n    },\n    emptyCart: state => {\n      state.products = [];\n      state.totalItemQuantity = 0;\n    },\n    setNewAttributeSelectedIndex: (state, action) => {\n      let oldId = \"\";\n      let newId = \"\";\n      const newProducts = state.products.map(item => {\n        const id = IdBuilder();\n        const newAttributeData = item.product.attributeData.map(attrItem => {\n          if (attrItem.name === action.payload.name && item.id === action.payload.id) {\n            oldId = item.id;\n            id.addId(item.product.data.id);\n            id.addId(`-${action.payload.name.replace(/ /g, \"-\")}-${action.payload.index}`);\n            newId = id.build();\n            return {\n              name: attrItem.name,\n              selectedIndex: action.payload.index\n            };\n          }\n\n          return current(attrItem);\n        });\n\n        if (id.build() !== \"\") {\n          newId = id.build();\n        }\n\n        return { ...item,\n          id: id.build() === \"\" ? item.id : id.build(),\n          product: { ...item.product,\n            attributeData: newAttributeData\n          }\n        };\n      });\n\n      if (state.products.find(item => item.id === newId)) {\n        let newQuantity = 0;\n        const newProductsMerged = current(state).products.filter(item => {\n          if (item.id === oldId) {\n            newQuantity = item.quantity;\n          }\n\n          return item.id !== oldId;\n        }).map(item => {\n          return { ...item,\n            quantity: item.quantity + newQuantity\n          };\n        });\n        return { ...state,\n          products: newProductsMerged\n        };\n      }\n\n      return { ...state,\n        products: newProducts\n      };\n    }\n  }\n});\nexport const {\n  addIntoCart,\n  removeFromCart,\n  emptyCart,\n  setNewAttributeSelectedIndex\n} = cartSlice.actions;\nexport default cartSlice.reducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"IdBuilder\");","map":{"version":3,"sources":["/home/duke/Code/scandiweb/src/provider/cartSlice.js"],"names":["createSlice","current","IdBuilder","finalId","addId","id","build","clear","cartSlice","name","initialState","totalItemQuantity","products","reducers","addIntoCart","state","action","payload","product","data","attributeData","forEach","item","replace","selectedIndex","map","quantity","find","removeFromCart","filter","emptyCart","setNewAttributeSelectedIndex","oldId","newId","newProducts","newAttributeData","attrItem","index","newQuantity","newProductsMerged","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, current } from \"@reduxjs/toolkit\";\n\nconst IdBuilder = () => {\n  let finalId = \"\";\n\n  return {\n    addId(id) {\n      finalId += id;\n      return this;\n    },\n    build() {\n      return finalId;\n    },\n    clear() {\n      finalId = \"\";\n    },\n  };\n};\n\nexport const cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    totalItemQuantity: 0,\n    products: [],\n  },\n  reducers: {\n    addIntoCart: (state, action) => {\n      const id = IdBuilder().addId(action.payload.product.data.id);\n      action.payload.product.attributeData.forEach((item) => {\n        id.addId(`-${item.name.replace(/ /g, \"-\")}-${item.selectedIndex}`);\n      });\n      const products = state.products.map((item) => {\n        if (item.id === id.build()) {\n          return { ...item, quantity: item.quantity + 1 };\n        }\n        return item;\n      });\n      if (state.products.find((item) => item.id === id.build())) {\n        return {\n          ...state,\n          products: [...products],\n          totalItemQuantity: state.totalItemQuantity + 1,\n        };\n      }\n      return {\n        ...state,\n        products: [\n          ...state.products,\n          { id: id.build(), product: action.payload.product, quantity: 1 },\n        ],\n        totalItemQuantity: state.totalItemQuantity + 1,\n      };\n    },\n    removeFromCart: (state, action) => {\n      if (state.products.find((item) => item.id === action.payload.id)) {\n        if (\n          state.products.find(\n            (item) => item.quantity === 1 && item.id === action.payload.id\n          )\n        ) {\n          return {\n            ...state,\n            products: state.products.filter((product) => {\n              return product.id !== action.payload.id;\n            }),\n            totalItemQuantity: state.totalItemQuantity - 1,\n          };\n        }\n        const products = state.products.map((item) => {\n          if (item.id === action.payload.id) {\n            return { ...item, quantity: item.quantity - 1 };\n          }\n          return item;\n        });\n        return {\n          ...state,\n          products: [...products],\n          totalItemQuantity: state.totalItemQuantity - 1,\n        };\n      }\n\n      return {\n        ...state,\n      };\n    },\n    emptyCart: (state) => {\n      state.products = [];\n      state.totalItemQuantity = 0;\n    },\n    setNewAttributeSelectedIndex: (state, action) => {\n      let oldId = \"\";\n      let newId = \"\";\n      const newProducts = state.products.map((item) => {\n        const id = IdBuilder();\n        const newAttributeData = item.product.attributeData.map((attrItem) => {\n          if (\n            attrItem.name === action.payload.name &&\n            item.id === action.payload.id\n          ) {\n            oldId = item.id;\n            id.addId(item.product.data.id);\n            id.addId(\n              `-${action.payload.name.replace(/ /g, \"-\")}-${\n                action.payload.index\n              }`\n            );\n            newId = id.build();\n            return {\n              name: attrItem.name,\n              selectedIndex: action.payload.index,\n            };\n          }\n          return current(attrItem);\n        });\n        if (id.build() !== \"\") {\n          newId = id.build();\n        }\n\n        return {\n          ...item,\n          id: id.build() === \"\" ? item.id : id.build(),\n          product: {\n            ...item.product,\n            attributeData: newAttributeData,\n          },\n        };\n      });\n\n      if (state.products.find((item) => item.id === newId)) {\n        let newQuantity = 0;\n        const newProductsMerged = current(state)\n          .products.filter((item) => {\n            if (item.id === oldId) {\n              newQuantity = item.quantity;\n            }\n            return item.id !== oldId;\n          })\n          .map((item) => {\n            return {\n              ...item,\n              quantity: item.quantity + newQuantity,\n            };\n          });\n\n        return {\n          ...state,\n          products: newProductsMerged,\n        };\n      }\n      return {\n        ...state,\n        products: newProducts,\n      };\n    },\n  },\n});\n\nexport const {\n  addIntoCart,\n  removeFromCart,\n  emptyCart,\n  setNewAttributeSelectedIndex,\n} = cartSlice.actions;\n\nexport default cartSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}